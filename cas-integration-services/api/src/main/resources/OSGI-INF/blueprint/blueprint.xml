<?xml version="1.0" encoding="UTF-8"?>
<!--
    JBoss, Home of Professional Open Source
    Copyright 2014, Red Hat, Inc. and/or its affiliates, and individual
    contributors by the @authors tag. See the copyright.txt in the
    distribution for a full listing of individual contributors.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!--
   This is the OSGi Blueprint XML file defining the Camel context and routes.  Because the file is in the
   OSGI-INF/blueprint directory inside our JAR, it will be automatically activated as soon as the bundle is installed.

   The root element for any OSGi Blueprint file is 'blueprint' - you also see the namespace definitions for both the Blueprint
   and the Camel namespaces.
-->
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:camel="http://camel.apache.org/schema/blueprint"
    xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0"
    xmlns:cxf="http://camel.apache.org/schema/cxf"
    xmlns:cxfcore="http://cxf.apache.org/core"
    xmlns:http-conf="http://cxf.apache.org/transports/http/configuration"
    xmlns:jaxrs="http://cxf.apache.org/jaxrs"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd">
    <!--  <blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:camel="http://camel.apache.org/schema/blueprint"
    xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation=" http://www.osgi.org/xmlns/blueprint/v1.0.0   https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd ">
-->
    <!--
      The namespace for the camelContext element in Blueprint is 'https://camel.apache.org/schema/blueprint'. Additionally,
    if  we can also define namespace prefixes we want to use them in the XPath expressions in our CBR.

      While it is not required to assign id's to the <camelContext/> and <route/> elements, it is a good idea
      to set those for runtime management purposes (logging, JMX MBeans, ...)
    -->
    <!-- to setup camel servlet with OSGi HttpService -->
    <!--    <bean
        class="org.apache.camel.component.servlet.CamelHttpTransportServlet" id="camelServlet"/>
    <bean class="com.smtp.webservice.GlccValidationImpl" id="serviceClass"/>
   -->
    <!-- we want json output in pretty mode -->
    <!--       <dataFormatProperty key="prettyPrint" value="true"/>  -->
    <!-- setup swagger api descriptions -->
    <!--       <apiProperty key="base.path" value="api/v1"/>
            <apiProperty key="host" value="localhost:9091"/>
            <apiProperty key="api.version" value="1.2.3"/>
            <apiProperty key="swagger.version" value="1.0"/>
            <apiProperty key="api.title" value="Common CAS Integration Services "/>
            <apiProperty key="api.description" value="API to support management of CAS Integration "/>
            <apiProperty key="api.contact.name" value="MTICS"/>
        </restConfiguration>
      -->
    <!-- defines the rest services using the context-path /user -->
    <!--   <rest consumes="application/json" path="/casIntegrationservices" produces="application/json">
            <description>Common CAS Integration Services</description>
         -->
    <!-- this is a rest GET to view an user by the given id -->
    <!--     <get outType="com.smtp.webservice.GlccValidationResponse" uri="/{cc}">
                <description>API to support management of CAS Integration</description>
                <param dataType="String"
                    description="5 segment code combination (aaa.bbb.ccc.ddd.eee)"
                    name="cc" type="path"/>
                <responseMessage message="The Valid Code Combination that was found"/>
                <to id="_to1" uri="bean:serviceClass?method=getGlcc(${header.cc})"/>
            </get>
        </rest>  -->
    <!--   <camelContext id="casIntegrationservices" xmlns="http://camel.apache.org/schema/blueprint"> -->
    <!--     <restConfiguration apiContextListing="true"
            apiContextPath="api-docs" bindingMode="json"
            component="jetty" contextPath="smtp-om/api/v1"
            enableCORS="true" port="9091">
 -->
    <!-- Setting up database: this is the JDBC data source which uses Oracle database -->
  <!--    <bean class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close" id="dataSource">
        <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
        <property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/>
        <property name="username" value="om"/>
        <property name="password" value="welcome1"/>
    </bean>
   --> <!-- configure the Camel SQL component to use the JDBC data source -->
  <!--    <bean class="org.apache.camel.component.sql.SqlComponent" id="sql">
        <property name="dataSource" ref="dataSource"/>
    </bean>
  -->  <!-- order bean is our business logic bean that creates new orders -->
 <!--     <bean class="com.smtp.webservice.OrderBean" id="orderBean"/>
  -->  <!-- here is Camel configured with a number of routes -->
  <!--    <camelContext id="camelContext-7fcd74c5-785c-4299-a05f-feac6e20e34a" xmlns="http://camel.apache.org/schema/blueprint">
  -->      <!-- use Camel property placeholder loaded from the given file -->
   <!--       <propertyPlaceholder id="placeholder" location="classpath:sql.properties"/>
        <bean
            class="org.apache.camel.component.properties.PropertiesComponent" id="placeholder">
            <property name="location" value="classpath:sql.properties"/>
        </bean>
  -->      <!-- route that generate new orders and insert them in the database -->
  <!--       <route id="generateOrder-route">
            <from id="_from1" uri="timer:foo?period=5s"/>
            <transform id="_transform1">
                <method method="generateOrder" ref="orderBean"/>
            </transform>
            <to id="_to1" uri="sql:{{sql.insertOrder}}"/>
            <log id="_log1" message="Inserted new order ${body[id]}"/>
        </route>
     -->    <!-- route that process the orders by picking up new rows from the database
       and when done processing then update the row to mark it as processed -->
    <!--      <route id="processOrder-route">
            <from id="_from2" uri="sql:{{sql.selectOrder}}?onConsume={{sql.markOrder}}"/>
            <to id="_to2" uri="bean:orderBean?method=processOrder"/>
            <log id="_log2" message="${body}"/>
        </route>
      -->  <!-- Route to transfer file to ftp server -->
            <camelContext id="camelContext-7fcd74c5-785c-4299-a05f-feac6e20e34a" xmlns="http://camel.apache.org/schema/blueprint">
        <route id="timerRoute">
            <from id="_from1" uri="timer:foo?period=5s"/>
            <setHeader headerName="Header" id="_setHeader1">
                <simple>MyTimer-${date:now:yyyyMMdd HH:mm:ss}.txt</simple>
            </setHeader>
            <setBody id="_setBody1">
                <simple>${date:now:yyyyMMdd HH:mm:ss} Hello This is the content from Timer </simple>
            </setBody>
            <to id="_to1" uri="ftp://jjose@athanwilcox.com@athanwilcox.com:21/inbox/?password=welcome1"/>
        </route>
        
    </camelContext>
</blueprint>
